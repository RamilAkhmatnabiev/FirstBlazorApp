@page "/signup"
@using FirstBlazorApp.Data.Models
@using FirstBlazorApp.Data.Providers
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

<EditForm Model="@user" OnValidSubmit="@ValidateUser">
    <div>
        <br/><br/><br/><br/>
    </div>
    <div>
        <h3 style="font-weight: bold; color: purple">Book stores login</h3>
    </div>
    <div>
        <br/>
    </div>
    <div class="col-12 row">
        <input class="form-control col-12" @bind="user.EmailAddress" placeholder="EmailAddress"/>
    </div>
    <br/>
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.Password" placeholder="Password"/>
    </div>
    <br/>
    <div class="col-12 row">
        <input type="password" class="form-control col-12" @bind="user.ConfirmPassword" placeholder="Confirm Password"/>
    </div>
    <br/>
    <div class="col-12 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control col-12 btn btn-primary" value="Sign up"/>
    </div>
    <br/>
</EditForm>

@code {
    private User user;

    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }

    private async Task<bool> ValidateUser()
    {
        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(user.EmailAddress);
        NavigationManager.NavigateTo("/index");
        await SessionStorage.SetItemAsync("emailAddress", user.EmailAddress);
        return await Task.FromResult(true);
    }

}