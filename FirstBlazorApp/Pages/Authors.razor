@page "/authors"
@using FirstBlazorApp.Data.Services.Interfaces
@using Microsoft.AspNetCore.Components
@using FirstBlazorApp.Data.Models
@inject NavigationManager NavigationManager
@inject IAuthorService AuthorService
@inject HttpClient HttpClient
@implements IDisposable

@* Для вызова методов JS подключаем IJSRuntime *@
@inject IJSRuntime JsRuntime

<div class="col-4">
    <h3>
        <b>Enter Author Information</b>
    </h3>
    <hr/>
    <ServerValidations IsVisible="IsSaveSuccessMessageVisible" Success="SaveSuccess">
        <span>Author: </span>@AuthorName
    </ServerValidations>

    @* Форма сохранения *@
    <EditForm Model="@AuthorModel" OnValidSubmit="@OnEditFormSubmit">
        @* Валидировать модель по атрибутам *@
        @* <DataAnnotationsValidator></DataAnnotationsValidator> *@

        @* Валидировать выводя ошибки(Выводит дефолтные ошибки или ошибки из модели) *@
        @* Если есть ValidationMessage у поля, то будет индивидуальное сообщение для каждого поля. А тут общее сообщение сверху формы *@
        @*<ValidationSummary></ValidationSummary>*@

        <div class="col-12 row">
            <label class="col-4 font-weight-bold">First name :</label>
            @* Задаем ссылку на HTML-компенент ключевым словом ref. Ахуй ниже => *@
            <InputText @ref="firstNameInput" class="form-control col-3" @bind-Value="AuthorModel.FirstName" placeholder="first name"/>
            &nbsp;<ValidationMessage For="@(() => AuthorModel.FirstName)"></ValidationMessage>
        </div>
        <br/>
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Last name :</label>
            <InputText class="form-control col-3" @bind-Value="AuthorModel.LastName" placeholder="last name"/>
            &nbsp;<ValidationMessage For="@(() => AuthorModel.LastName)"></ValidationMessage>
        </div>
        <br/>
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Phone :</label>
            <InputText class="form-control col-3" @bind-Value="AuthorModel.Phone" placeholder="phone"/>
            &nbsp;<ValidationMessage For="@(() => AuthorModel.Phone)"></ValidationMessage>
        </div>
        <br/>
        @* Пример использования кастомного компонента *@
        @* <div class="col-12 row"> *@
        @*     <label class="col-4 font-weight-bold">City :</label> *@
        @*     <SelectCity OnChangeEvent="OnSelectCityChange"></SelectCity> *@
        @* </div> *@
        <br/>
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Email :</label>
            <InputText class="form-control col-3" @bind-Value="AuthorModel.EmailAddress" placeholder="email"/>
            &nbsp;<ValidationMessage For="@(() => AuthorModel.City)"></ValidationMessage>
        </div>
        <br/>
        <div class="col-12 row">
            <label class="col-4 font-weight-bold">Salary :</label>
            <InputNumber class="form-control col-3" @bind-Value="AuthorModel.Salary" placeholder="salary"/>
            &nbsp;<ValidationMessage For="@(() => AuthorModel.Salary)"></ValidationMessage>
        </div>
        <br/>
        <div class="col-12 row">
            <span class="col-2"></span>
            <input type="submit" class="form-control btn btn-primary" value="Save"/>
            <span>&nbsp;</span>
            <input type="submit" class="form-control btn btn-primary" value="Clear"/>
        </div>
        <br/>
    </EditForm>
</div>


<div class="col-10">
    <h3>
        <b>Autors</b>
    </h3>

    <table class="table">
        <thead>
        <tr>
            <th>AuthorId</th>
            <th>First Name</th>
            <th>Lat Name</th>
            @* <th>City</th> *@
            <th>Email Address</th>
            <th>Salary</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var author in this.AuthorRecords ?? new List<AuthorRecord>())
        {
            <tr>
                <td>
                    <NavLink fref=@string.Format("/authors/authordetail/{0}", author.AuthorId)>
                        @author.AuthorId
                    </NavLink>
                </td>
                <td>
                    <a href=@string.Format("/authors/authordetail/{0}", author.AuthorId)>@author.FirstName</a>
                </td>
                @* <td>@author.FirstName</td> *@
                <td>@author.LastName</td>
                @* <td>@author.City</td> *@
                <td>@author.EmailAddress</td>
                <td>@author.Salary</td>
                <td>
                    @* Пример вызова метода при нажатии элемента с передачей записи из строки *@
                     <a style="text-underline-position: below; cursor: pointer; color: blue; font-weight: bold" @onclick="@(() => DeleteAuthor(author))">Delete</a>
                     <a style="text-underline-position: below; cursor: pointer; color: blue; font-weight: bold" @onclick="@(() => EditAuthor(author))">Edit</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
</div>

<hr/>

@* Тестовые поля для демонстации *@
<div class="col-12">"Место для текущей даты"</div>
<div class="col-12">Место для версии</div>

<a href="/authors/authordetail">Автор 1</a>
<br/>
<button class="btn btn-primary" @onclick="OnGoToButtonClick">Go with 1</button>

@code {
    private List<AuthorRecord> AuthorRecords { get; set; }
    private AuthorRecord AuthorModel { get; set; }
    private string[] Cities { get; set; }

    private string AuthorName { get; set; }
    private string? SelectedCity { get; set; }
    private bool SaveSuccess { get; set; }
    private bool IsSaveSuccessMessageVisible { get; set; }

    //Так ловим элементы HTML
    //Просто создаем поле с типом ElementReference и названием из ref элемента, и он становится доступным для взаимодействия!!!!
    private ElementReference firstNameInput2;

    //Так ловим элементы Blazor'a. ВНутри себя уже содержит ссылку на html элемент
    private InputText firstNameInput;


    private void OnGoToButtonClick()
    {
        NavigationManager.NavigateTo("/authors/authordetail/1");
    }

    protected override async Task OnInitializedAsync()
    {
        this.AuthorModel = new AuthorRecord();
        await this.SetAuthorsListAsync();
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        await firstNameInput.Element.Value.FocusAsync();
    }

    private async Task SetAuthorsListAsync(bool needStateChanges = false)
    {
        this.AuthorRecords = await this.AuthorService.GetAuthorRecords();
        if (needStateChanges)
        {
            StateHasChanged();
        }
    }

    private async Task OnEditFormSubmit()
    {
        try
        {
            this.SetFieldsBeforeSave();
            var httpResponse = await this.DoSaveActions();
            await this.ReLoadAuthorsList();
            await this.DoAfterSaveActions(httpResponse.IsSuccessStatusCode);
        }
        catch (Exception e)
        {
            this.SaveSuccess = false;
        }
    }

    private void SetFieldsBeforeSave()
    {
        this.AuthorModel.City = SelectedCity;
        this.AuthorName = AuthorModel.FirstName;
    }

    private async Task<HttpResponseMessage> DoSaveActions()
    {
        HttpResponseMessage httpResponse;
        if (this.AuthorModel.AuthorId > 0)
        {
            httpResponse = await this.AuthorService.UpdateAuthor(this.AuthorModel);
        }
        else
        {
            httpResponse = await this.AuthorService.SaveAuthor(this.AuthorModel);
        }
        
        this.AuthorModel = new AuthorRecord();

        return httpResponse;
    }

    private async Task DoAfterSaveActions(bool saveSuccess)
    {
    //Вызываем любой JS метод из CS кода. Ебануться!!!
    //await this.JsRuntime.InvokeVoidAsync("showSuccessSaveMessage", this.AuthorModel.FirstName);

    //Вызываем метод с передачей компонента firstNameInput прямо в JS код. Компонент проставился автоматический. Ахуенно!!!
        await this.JsRuntime.InvokeVoidAsync("setFocusOnElement", firstNameInput.Element);

    //Вызывваем метод элемента напрямую из CS кода
        await firstNameInput.Element.Value.FocusAsync();

        this.IsSaveSuccessMessageVisible = true;
        this.SaveSuccess = saveSuccess;
    }

    //Commentend field
    private void OnSelectCityChange(ChangeEventArgs changeEventArgs)
    {
        SelectedCity = (string)changeEventArgs.Value!;
    }

    private async Task EditAuthor(AuthorRecord author)
    {
        this.AuthorModel = author;
    }
    private async Task DeleteAuthor(AuthorRecord author)
    {
        await this.AuthorService.DeleteAuthor(author.AuthorId);
        await this.ReLoadAuthorsList();
    }

    private async Task ReLoadAuthorsList()
    {
        await this.SetAuthorsListAsync(true);
    }

    public void Dispose()
    {
        ((IDisposable)firstNameInput).Dispose();
    }

}